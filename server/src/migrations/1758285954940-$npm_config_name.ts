import { MigrationInterface, QueryRunner } from "typeorm";

export class  $npmConfigName1758285954940 implements MigrationInterface {
    name = ' $npmConfigName1758285954940'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE \`projects\` (\`id\` varchar(36) NOT NULL, \`key\` varchar(20) NOT NULL, \`name\` varchar(80) NOT NULL, \`visibility\` varchar(255) NOT NULL DEFAULT 'private', \`archived\` tinyint NOT NULL DEFAULT 0, \`createdBy\` varchar(255) NOT NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_63e67599567b2126cfef14e147\` (\`key\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`users\` (\`id\` varchar(36) NOT NULL, \`email\` varchar(160) NOT NULL, \`name\` varchar(120) NOT NULL, \`display_name\` varchar(120) NULL, \`avatar\` varchar(255) NULL, \`passwordHash\` varchar(255) NOT NULL, \`status\` varchar(255) NOT NULL DEFAULT 'active', \`systemRoles\` json NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_97672ac88f789774dd47f7c8be\` (\`email\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_event_logs\` (\`id\` varchar(36) NOT NULL, \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`eventType\` varchar(50) NOT NULL COMMENT '事件类型', \`eventData\` json NOT NULL COMMENT '事件数据', \`processed\` tinyint NOT NULL COMMENT '是否已处理' DEFAULT 0, \`errorMessage\` text NULL COMMENT '错误信息', \`retryCount\` int NOT NULL COMMENT '重试次数' DEFAULT '0', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`processedAt\` timestamp NULL COMMENT '处理时间', INDEX \`idx_gitlab_events_retry\` (\`retryCount\`, \`processed\`), INDEX \`idx_gitlab_events_created_at\` (\`createdAt\`), INDEX \`idx_gitlab_events_processed\` (\`processed\`), INDEX \`idx_gitlab_events_type\` (\`eventType\`), INDEX \`idx_gitlab_events_instance\` (\`gitlabInstanceId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_user_mappings\` (\`id\` varchar(36) NOT NULL, \`userId\` varchar(36) NOT NULL COMMENT '项目管理工具用户ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabUserId\` int NOT NULL COMMENT 'GitLab用户ID', \`gitlabUsername\` varchar(255) NOT NULL COMMENT 'GitLab用户名', \`gitlabEmail\` varchar(255) NULL COMMENT 'GitLab用户邮箱', \`gitlabName\` varchar(255) NULL COMMENT 'GitLab用户显示名称', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`lastSyncAt\` timestamp NULL COMMENT '最后同步时间', \`deactivatedAt\` timestamp NULL COMMENT '停用时间', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`unique_gitlab_user\` (\`gitlabInstanceId\`, \`gitlabUserId\`), UNIQUE INDEX \`unique_user_mapping\` (\`userId\`, \`gitlabInstanceId\`), INDEX \`idx_gitlab_user_mappings_gitlab_user\` (\`gitlabUserId\`), INDEX \`idx_gitlab_user_mappings_instance\` (\`gitlabInstanceId\`), INDEX \`idx_gitlab_user_mappings_user\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_group_mappings\` (\`id\` varchar(36) NOT NULL, \`projectId\` varchar(36) NOT NULL COMMENT '项目管理工具项目ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabGroupId\` int NOT NULL COMMENT 'GitLab分组ID', \`gitlabGroupPath\` varchar(500) NOT NULL COMMENT 'GitLab分组路径', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`unique_group_mapping\` (\`projectId\`, \`gitlabInstanceId\`, \`gitlabGroupId\`), INDEX \`idx_gitlab_group_mappings_active\` (\`isActive\`), INDEX \`idx_gitlab_group_mappings_gitlab_group\` (\`gitlabGroupId\`), INDEX \`idx_gitlab_group_mappings_instance\` (\`gitlabInstanceId\`), INDEX \`idx_gitlab_group_mappings_project\` (\`projectId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_sync_status\` (\`id\` varchar(36) NOT NULL, \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`projectId\` varchar(36) NULL COMMENT '项目ID', \`syncType\` enum ('incremental', 'full', 'compensation') NOT NULL COMMENT '同步类型' DEFAULT 'incremental', \`status\` enum ('success', 'failed', 'in_progress', 'completed') NOT NULL COMMENT '同步状态' DEFAULT 'in_progress', \`statistics\` json NULL COMMENT '同步统计信息', \`lastSyncAt\` timestamp NULL COMMENT '最后同步时间', \`errorMessage\` text NULL COMMENT '错误信息', \`syncCount\` int NOT NULL COMMENT '同步次数' DEFAULT '0', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_project_mappings\` (\`id\` varchar(36) NOT NULL, \`projectId\` varchar(36) NOT NULL COMMENT '项目管理工具项目ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabGroupId\` int NOT NULL COMMENT 'GitLab分组ID', \`gitlabGroupPath\` varchar(500) NOT NULL COMMENT 'GitLab分组路径', \`webhookId\` varchar(36) NULL COMMENT 'GitLab Webhook ID', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`syncStatusId\` varchar(36) NULL, UNIQUE INDEX \`unique_mapping\` (\`projectId\`, \`gitlabInstanceId\`, \`gitlabGroupId\`), INDEX \`idx_gitlab_mappings_active\` (\`isActive\`), INDEX \`idx_gitlab_mappings_gitlab_group\` (\`gitlabGroupId\`), INDEX \`idx_gitlab_mappings_instance\` (\`gitlabInstanceId\`), INDEX \`idx_gitlab_mappings_project\` (\`projectId\`), UNIQUE INDEX \`REL_f6d2fdd4ddd214f6128620f543\` (\`syncStatusId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_instances\` (\`id\` varchar(36) NOT NULL, \`name\` varchar(100) NOT NULL COMMENT '实例名称', \`baseUrl\` varchar(500) NOT NULL COMMENT 'GitLab实例基础URL', \`apiToken\` varchar(500) NOT NULL COMMENT 'API访问令牌（加密存储）', \`webhookSecret\` varchar(128) NULL COMMENT 'Webhook签名密钥', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`instanceType\` enum ('self_hosted', 'gitlab_com') NOT NULL COMMENT '实例类型' DEFAULT 'self_hosted', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`idx_gitlab_instances_created_at\` (\`createdAt\`), INDEX \`idx_gitlab_instances_type\` (\`instanceType\`), INDEX \`idx_gitlab_instances_active\` (\`isActive\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`project_issue_states\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`issue_type\` enum ('requirement', 'task', 'bug') NOT NULL, \`state_key\` varchar(32) NOT NULL, \`state_name\` varchar(64) NOT NULL, \`color\` varchar(16) NOT NULL DEFAULT '#1890ff', \`is_initial\` tinyint NOT NULL DEFAULT 0, \`is_final\` tinyint NOT NULL DEFAULT 0, \`sort_order\` int NOT NULL DEFAULT '0', \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_5bd40886be5eb2d7d615854172\` (\`project_id\`, \`issue_type\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`attachments\` (\`id\` varchar(36) NOT NULL, \`issue_id\` varchar(255) NOT NULL, \`object_key\` varchar(255) NOT NULL, \`file_name\` varchar(255) NOT NULL, \`size\` int NOT NULL, \`content_type\` varchar(128) NOT NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_ebd5eb09e0d62f46c41c435133\` (\`issue_id\`, \`createdAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`comments\` (\`id\` varchar(36) NOT NULL, \`issue_id\` varchar(255) NOT NULL, \`author_id\` varchar(255) NOT NULL, \`body\` mediumtext NOT NULL, \`mentions\` json NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_d3f0e4882cfe7aa42e7f2dc2da\` (\`issue_id\`, \`createdAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`releases\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(255) NOT NULL, \`tag\` varchar(255) NOT NULL, \`notes\` mediumtext NULL, \`released_at\` timestamp(6) NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_9c6307b3a3ec00b5c28f3d99b0\` (\`project_id\`, \`released_at\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`memberships\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`user_id\` varchar(255) NOT NULL, \`role\` varchar(32) NOT NULL, \`joinedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_246faae84ffe34c04db7c91ae5\` (\`project_id\`, \`user_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`board_columns\` (\`id\` varchar(36) NOT NULL, \`board_id\` varchar(255) NOT NULL, \`name\` varchar(100) NOT NULL, \`description\` text NULL, \`wip_limit\` int NULL, \`sort_order\` int NOT NULL DEFAULT '0', \`state_mapping\` varchar(128) NOT NULL, \`color\` varchar(16) NOT NULL DEFAULT '#1890ff', \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_55e6772f5b84a2fb358db47331\` (\`board_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`boards\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(100) NOT NULL, \`description\` text NULL, \`is_default\` tinyint NOT NULL DEFAULT 0, \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_1542ae826c0dfeaf4c79e07fc5\` (\`project_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`sprints\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(255) NOT NULL, \`start_at\` timestamp(6) NULL, \`end_at\` timestamp(6) NULL, \`goal\` varchar(255) NULL, \`capacity\` int NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_3be27b547b3f5f2536f1b5822a\` (\`project_id\`, \`start_at\`, \`end_at\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`work_items\` (\`id\` varchar(36) NOT NULL, \`type\` varchar(16) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`requirement_id\` varchar(255) NULL, \`feature_module_id\` varchar(255) NULL, \`title\` varchar(140) NOT NULL, \`description\` mediumtext NULL, \`state\` varchar(32) NOT NULL, \`priority\` varchar(16) NULL, \`severity\` varchar(16) NULL, \`assignee_id\` varchar(255) NULL, \`reporter_id\` varchar(255) NULL, \`story_points\` int NULL, \`estimate_minutes\` int NULL, \`remaining_minutes\` int NULL, \`estimated_hours\` decimal(5,1) NULL, \`actual_hours\` decimal(5,1) NULL, \`sprint_id\` varchar(255) NULL, \`release_id\` varchar(255) NULL, \`parent_id\` varchar(255) NULL, \`labels\` json NULL, \`due_at\` timestamp(6) NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`deleted\` tinyint NOT NULL DEFAULT 0, \`projectId\` varchar(36) NULL, \`requirementId\` varchar(36) NULL, \`featureModuleId\` varchar(36) NULL, \`parentId\` varchar(36) NULL, INDEX \`IDX_a295bab46dcf3e0265f6b8c309\` (\`parent_id\`), INDEX \`IDX_7350638f0b7795951a2cffa8ce\` (\`feature_module_id\`), INDEX \`IDX_1ba6a9d8c8759b01c030ecba39\` (\`requirement_id\`), INDEX \`IDX_57e92bf645c8bf06f739d2f69d\` (\`project_id\`, \`title\`), INDEX \`IDX_116a3b02a535035f99e3ff4158\` (\`project_id\`, \`type\`, \`state\`, \`assignee_id\`, \`updatedAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`feature_modules\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`requirement_id\` varchar(255) NULL, \`parent_id\` varchar(255) NULL, \`title\` varchar(140) NOT NULL, \`description\` mediumtext NULL, \`state\` varchar(32) NOT NULL, \`assignee_id\` varchar(255) NULL, \`labels\` json NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`deleted\` tinyint NOT NULL DEFAULT 0, INDEX \`IDX_46068bdac28c88ff2c31276a49\` (\`project_id\`, \`parent_id\`), INDEX \`IDX_93ac4c4ad27acc56d19c551139\` (\`requirement_id\`), INDEX \`IDX_c355f863341cd88ebce037b1ed\` (\`project_id\`, \`title\`), INDEX \`IDX_20580ef90db3ff52028647957f\` (\`project_id\`, \`state\`, \`assignee_id\`, \`updatedAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`requirements\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`title\` varchar(140) NOT NULL, \`description\` mediumtext NULL, \`state\` varchar(32) NOT NULL, \`priority\` varchar(16) NULL, \`assignee_id\` varchar(255) NULL, \`reporter_id\` varchar(255) NULL, \`story_points\` int NULL, \`labels\` json NULL, \`due_at\` timestamp(6) NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`deleted\` tinyint NOT NULL DEFAULT 0, \`projectId\` varchar(36) NULL, INDEX \`IDX_1c59ba34570d68aba5b9087907\` (\`project_id\`, \`title\`), INDEX \`IDX_412fa763b7534a9c2e2a28f1ae\` (\`project_id\`, \`state\`, \`assignee_id\`, \`updatedAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_epic_mappings\` (\`id\` varchar(36) NOT NULL, \`projectId\` varchar(36) NOT NULL COMMENT 'PM系统项目ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabGroupId\` int NOT NULL COMMENT 'GitLab Group ID', \`gitlabEpicId\` int NOT NULL COMMENT 'GitLab Epic ID', \`entityType\` enum ('requirement', 'subsystem', 'feature_module') NOT NULL COMMENT '实体类型', \`entityId\` varchar(36) NOT NULL COMMENT '实体ID', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`lastSyncAt\` timestamp NULL COMMENT '最后同步时间', \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`unique_epic_mapping\` (\`projectId\`, \`entityType\`, \`entityId\`), INDEX \`IDX_9675f77ee583a8ee9ddb7bc1c7\` (\`gitlabInstanceId\`, \`gitlabGroupId\`, \`gitlabEpicId\`), INDEX \`IDX_68afee2d4a49dc9cf486588c77\` (\`projectId\`, \`entityType\`, \`entityId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`ALTER TABLE \`gitlab_event_logs\` ADD CONSTRAINT \`FK_b660fa48c9253cdc511d6a818d5\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` ADD CONSTRAINT \`FK_7f146ebc41419786bbe732aa1a4\` FOREIGN KEY (\`userId\`) REFERENCES \`users\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` ADD CONSTRAINT \`FK_f3f8ffd307b1c09d2fdf0106c4e\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_group_mappings\` ADD CONSTRAINT \`FK_d107a380617ec6a08f492e1b718\` FOREIGN KEY (\`projectId\`) REFERENCES \`projects\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_group_mappings\` ADD CONSTRAINT \`FK_896c8c7db399dd70115a25e9c03\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` ADD CONSTRAINT \`FK_fbd7d315aded189ab18674e450f\` FOREIGN KEY (\`projectId\`) REFERENCES \`projects\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` ADD CONSTRAINT \`FK_c4f90effb9651b6accda8499942\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` ADD CONSTRAINT \`FK_f6d2fdd4ddd214f6128620f543b\` FOREIGN KEY (\`syncStatusId\`) REFERENCES \`gitlab_sync_status\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`memberships\` ADD CONSTRAINT \`FK_7c1e2fdfed4f6838e0c05ae5051\` FOREIGN KEY (\`user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`board_columns\` ADD CONSTRAINT \`FK_55e6772f5b84a2fb358db473313\` FOREIGN KEY (\`board_id\`) REFERENCES \`boards\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`work_items\` ADD CONSTRAINT \`FK_5389d5a18c0058c26f949c3ace7\` FOREIGN KEY (\`projectId\`) REFERENCES \`projects\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`work_items\` ADD CONSTRAINT \`FK_3fb4584c8df932555ec4c8a56a0\` FOREIGN KEY (\`requirementId\`) REFERENCES \`requirements\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`work_items\` ADD CONSTRAINT \`FK_8e842383b209397e0c36565409d\` FOREIGN KEY (\`featureModuleId\`) REFERENCES \`feature_modules\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`work_items\` ADD CONSTRAINT \`FK_abeae3c5eda0582b40f441724d1\` FOREIGN KEY (\`parentId\`) REFERENCES \`work_items\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` ADD CONSTRAINT \`FK_1a7cd479d68971fa2bf907da838\` FOREIGN KEY (\`project_id\`) REFERENCES \`projects\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` ADD CONSTRAINT \`FK_93ac4c4ad27acc56d19c5511399\` FOREIGN KEY (\`requirement_id\`) REFERENCES \`requirements\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` ADD CONSTRAINT \`FK_f6e529d44162985c833e0d77557\` FOREIGN KEY (\`parent_id\`) REFERENCES \`feature_modules\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`requirements\` ADD CONSTRAINT \`FK_bc1f7e3b02fa4e00b380840ab57\` FOREIGN KEY (\`projectId\`) REFERENCES \`projects\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_epic_mappings\` ADD CONSTRAINT \`FK_6e81e056580e8490f896f75e32a\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE \`gitlab_epic_mappings\` DROP FOREIGN KEY \`FK_6e81e056580e8490f896f75e32a\``);
        await queryRunner.query(`ALTER TABLE \`requirements\` DROP FOREIGN KEY \`FK_bc1f7e3b02fa4e00b380840ab57\``);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` DROP FOREIGN KEY \`FK_f6e529d44162985c833e0d77557\``);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` DROP FOREIGN KEY \`FK_93ac4c4ad27acc56d19c5511399\``);
        await queryRunner.query(`ALTER TABLE \`feature_modules\` DROP FOREIGN KEY \`FK_1a7cd479d68971fa2bf907da838\``);
        await queryRunner.query(`ALTER TABLE \`work_items\` DROP FOREIGN KEY \`FK_abeae3c5eda0582b40f441724d1\``);
        await queryRunner.query(`ALTER TABLE \`work_items\` DROP FOREIGN KEY \`FK_8e842383b209397e0c36565409d\``);
        await queryRunner.query(`ALTER TABLE \`work_items\` DROP FOREIGN KEY \`FK_3fb4584c8df932555ec4c8a56a0\``);
        await queryRunner.query(`ALTER TABLE \`work_items\` DROP FOREIGN KEY \`FK_5389d5a18c0058c26f949c3ace7\``);
        await queryRunner.query(`ALTER TABLE \`board_columns\` DROP FOREIGN KEY \`FK_55e6772f5b84a2fb358db473313\``);
        await queryRunner.query(`ALTER TABLE \`memberships\` DROP FOREIGN KEY \`FK_7c1e2fdfed4f6838e0c05ae5051\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` DROP FOREIGN KEY \`FK_f6d2fdd4ddd214f6128620f543b\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` DROP FOREIGN KEY \`FK_c4f90effb9651b6accda8499942\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` DROP FOREIGN KEY \`FK_fbd7d315aded189ab18674e450f\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_group_mappings\` DROP FOREIGN KEY \`FK_896c8c7db399dd70115a25e9c03\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_group_mappings\` DROP FOREIGN KEY \`FK_d107a380617ec6a08f492e1b718\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` DROP FOREIGN KEY \`FK_f3f8ffd307b1c09d2fdf0106c4e\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` DROP FOREIGN KEY \`FK_7f146ebc41419786bbe732aa1a4\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_event_logs\` DROP FOREIGN KEY \`FK_b660fa48c9253cdc511d6a818d5\``);
        await queryRunner.query(`DROP INDEX \`IDX_68afee2d4a49dc9cf486588c77\` ON \`gitlab_epic_mappings\``);
        await queryRunner.query(`DROP INDEX \`IDX_9675f77ee583a8ee9ddb7bc1c7\` ON \`gitlab_epic_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_epic_mapping\` ON \`gitlab_epic_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_epic_mappings\``);
        await queryRunner.query(`DROP INDEX \`IDX_412fa763b7534a9c2e2a28f1ae\` ON \`requirements\``);
        await queryRunner.query(`DROP INDEX \`IDX_1c59ba34570d68aba5b9087907\` ON \`requirements\``);
        await queryRunner.query(`DROP TABLE \`requirements\``);
        await queryRunner.query(`DROP INDEX \`IDX_20580ef90db3ff52028647957f\` ON \`feature_modules\``);
        await queryRunner.query(`DROP INDEX \`IDX_c355f863341cd88ebce037b1ed\` ON \`feature_modules\``);
        await queryRunner.query(`DROP INDEX \`IDX_93ac4c4ad27acc56d19c551139\` ON \`feature_modules\``);
        await queryRunner.query(`DROP INDEX \`IDX_46068bdac28c88ff2c31276a49\` ON \`feature_modules\``);
        await queryRunner.query(`DROP TABLE \`feature_modules\``);
        await queryRunner.query(`DROP INDEX \`IDX_116a3b02a535035f99e3ff4158\` ON \`work_items\``);
        await queryRunner.query(`DROP INDEX \`IDX_57e92bf645c8bf06f739d2f69d\` ON \`work_items\``);
        await queryRunner.query(`DROP INDEX \`IDX_1ba6a9d8c8759b01c030ecba39\` ON \`work_items\``);
        await queryRunner.query(`DROP INDEX \`IDX_7350638f0b7795951a2cffa8ce\` ON \`work_items\``);
        await queryRunner.query(`DROP INDEX \`IDX_a295bab46dcf3e0265f6b8c309\` ON \`work_items\``);
        await queryRunner.query(`DROP TABLE \`work_items\``);
        await queryRunner.query(`DROP INDEX \`IDX_3be27b547b3f5f2536f1b5822a\` ON \`sprints\``);
        await queryRunner.query(`DROP TABLE \`sprints\``);
        await queryRunner.query(`DROP INDEX \`IDX_1542ae826c0dfeaf4c79e07fc5\` ON \`boards\``);
        await queryRunner.query(`DROP TABLE \`boards\``);
        await queryRunner.query(`DROP INDEX \`IDX_55e6772f5b84a2fb358db47331\` ON \`board_columns\``);
        await queryRunner.query(`DROP TABLE \`board_columns\``);
        await queryRunner.query(`DROP INDEX \`IDX_246faae84ffe34c04db7c91ae5\` ON \`memberships\``);
        await queryRunner.query(`DROP TABLE \`memberships\``);
        await queryRunner.query(`DROP INDEX \`IDX_9c6307b3a3ec00b5c28f3d99b0\` ON \`releases\``);
        await queryRunner.query(`DROP TABLE \`releases\``);
        await queryRunner.query(`DROP INDEX \`IDX_d3f0e4882cfe7aa42e7f2dc2da\` ON \`comments\``);
        await queryRunner.query(`DROP TABLE \`comments\``);
        await queryRunner.query(`DROP INDEX \`IDX_ebd5eb09e0d62f46c41c435133\` ON \`attachments\``);
        await queryRunner.query(`DROP TABLE \`attachments\``);
        await queryRunner.query(`DROP INDEX \`IDX_5bd40886be5eb2d7d615854172\` ON \`project_issue_states\``);
        await queryRunner.query(`DROP TABLE \`project_issue_states\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_active\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_type\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_created_at\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP TABLE \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`REL_f6d2fdd4ddd214f6128620f543\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_project\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_instance\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_gitlab_group\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_active\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_mapping\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_sync_status\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_group_mappings_project\` ON \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_group_mappings_instance\` ON \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_group_mappings_gitlab_group\` ON \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_group_mappings_active\` ON \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_group_mapping\` ON \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_group_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_instance\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_gitlab_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_user_mapping\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_gitlab_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_instance\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_type\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_processed\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_created_at\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_retry\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP TABLE \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`IDX_97672ac88f789774dd47f7c8be\` ON \`users\``);
        await queryRunner.query(`DROP TABLE \`users\``);
        await queryRunner.query(`DROP INDEX \`IDX_63e67599567b2126cfef14e147\` ON \`projects\``);
        await queryRunner.query(`DROP TABLE \`projects\``);
    }

}
