import { MigrationInterface, QueryRunner } from "typeorm";

export class InitialSchema1757760492206 implements MigrationInterface {
    name = 'InitialSchema1757760492206'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE \`projects\` (\`id\` varchar(36) NOT NULL, \`key\` varchar(20) NOT NULL, \`name\` varchar(80) NOT NULL, \`visibility\` varchar(255) NOT NULL DEFAULT 'private', \`archived\` tinyint NOT NULL DEFAULT 0, \`createdBy\` varchar(255) NOT NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_63e67599567b2126cfef14e147\` (\`key\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`users\` (\`id\` varchar(36) NOT NULL, \`email\` varchar(160) NOT NULL, \`name\` varchar(120) NOT NULL, \`display_name\` varchar(120) NULL, \`avatar\` varchar(255) NULL, \`passwordHash\` varchar(255) NOT NULL, \`status\` varchar(255) NOT NULL DEFAULT 'active', \`systemRoles\` json NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_97672ac88f789774dd47f7c8be\` (\`email\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_sync_status\` (\`id\` varchar(36) NOT NULL, \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`projectId\` varchar(36) NULL COMMENT '项目ID', \`syncType\` enum ('incremental', 'full', 'compensation') NOT NULL COMMENT '同步类型' DEFAULT 'incremental', \`status\` enum ('success', 'failed', 'in_progress', 'completed') NOT NULL COMMENT '同步状态' DEFAULT 'in_progress', \`statistics\` json NULL COMMENT '同步统计信息', \`lastSyncAt\` timestamp NULL COMMENT '最后同步时间', \`errorMessage\` text NULL COMMENT '错误信息', \`syncCount\` int NOT NULL COMMENT '同步次数' DEFAULT '0', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`mappingId\` varchar(36) NULL, UNIQUE INDEX \`REL_23a3e650acce1182e043a2f2af\` (\`mappingId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_project_mappings\` (\`id\` varchar(36) NOT NULL, \`projectId\` varchar(36) NOT NULL COMMENT '项目管理工具项目ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabProjectId\` int NOT NULL COMMENT 'GitLab项目ID', \`gitlabProjectPath\` varchar(500) NOT NULL COMMENT 'GitLab项目路径', \`webhookId\` varchar(36) NULL COMMENT 'GitLab Webhook ID', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`unique_mapping\` (\`projectId\`, \`gitlabInstanceId\`, \`gitlabProjectId\`), INDEX \`idx_gitlab_mappings_active\` (\`isActive\`), INDEX \`idx_gitlab_mappings_gitlab_project\` (\`gitlabProjectId\`), INDEX \`idx_gitlab_mappings_instance\` (\`gitlabInstanceId\`), INDEX \`idx_gitlab_mappings_project\` (\`projectId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_event_logs\` (\`id\` varchar(36) NOT NULL, \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`eventType\` varchar(50) NOT NULL COMMENT '事件类型', \`eventData\` json NOT NULL COMMENT '事件数据', \`processed\` tinyint NOT NULL COMMENT '是否已处理' DEFAULT 0, \`errorMessage\` text NULL COMMENT '错误信息', \`retryCount\` int NOT NULL COMMENT '重试次数' DEFAULT '0', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`processedAt\` timestamp NULL COMMENT '处理时间', INDEX \`idx_gitlab_events_retry\` (\`retryCount\`, \`processed\`), INDEX \`idx_gitlab_events_created_at\` (\`createdAt\`), INDEX \`idx_gitlab_events_processed\` (\`processed\`), INDEX \`idx_gitlab_events_type\` (\`eventType\`), INDEX \`idx_gitlab_events_instance\` (\`gitlabInstanceId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_user_mappings\` (\`id\` varchar(36) NOT NULL, \`userId\` varchar(36) NOT NULL COMMENT '项目管理工具用户ID', \`gitlabInstanceId\` varchar(36) NOT NULL COMMENT 'GitLab实例ID', \`gitlabUserId\` int NOT NULL COMMENT 'GitLab用户ID', \`gitlabUsername\` varchar(255) NOT NULL COMMENT 'GitLab用户名', \`gitlabEmail\` varchar(255) NULL COMMENT 'GitLab用户邮箱', \`gitlabName\` varchar(255) NULL COMMENT 'GitLab用户显示名称', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`lastSyncAt\` timestamp NULL COMMENT '最后同步时间', \`deactivatedAt\` timestamp NULL COMMENT '停用时间', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), UNIQUE INDEX \`unique_gitlab_user\` (\`gitlabInstanceId\`, \`gitlabUserId\`), UNIQUE INDEX \`unique_user_mapping\` (\`userId\`, \`gitlabInstanceId\`), INDEX \`idx_gitlab_user_mappings_gitlab_user\` (\`gitlabUserId\`), INDEX \`idx_gitlab_user_mappings_instance\` (\`gitlabInstanceId\`), INDEX \`idx_gitlab_user_mappings_user\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`gitlab_instances\` (\`id\` varchar(36) NOT NULL, \`name\` varchar(100) NOT NULL COMMENT '实例名称', \`baseUrl\` varchar(500) NOT NULL COMMENT 'GitLab实例基础URL', \`apiToken\` varchar(500) NOT NULL COMMENT 'API访问令牌（加密存储）', \`webhookSecret\` varchar(128) NULL COMMENT 'Webhook签名密钥', \`isActive\` tinyint NOT NULL COMMENT '是否激活' DEFAULT 1, \`instanceType\` enum ('self_hosted', 'gitlab_com') NOT NULL COMMENT '实例类型' DEFAULT 'self_hosted', \`createdAt\` datetime(6) NOT NULL COMMENT '创建时间' DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` datetime(6) NOT NULL COMMENT '更新时间' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`idx_gitlab_instances_created_at\` (\`createdAt\`), INDEX \`idx_gitlab_instances_type\` (\`instanceType\`), INDEX \`idx_gitlab_instances_active\` (\`isActive\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`project_issue_states\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`issue_type\` enum ('requirement', 'task', 'bug') NOT NULL, \`state_key\` varchar(32) NOT NULL, \`state_name\` varchar(64) NOT NULL, \`color\` varchar(16) NOT NULL DEFAULT '#1890ff', \`is_initial\` tinyint NOT NULL DEFAULT 0, \`is_final\` tinyint NOT NULL DEFAULT 0, \`sort_order\` int NOT NULL DEFAULT '0', \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_5bd40886be5eb2d7d615854172\` (\`project_id\`, \`issue_type\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`issues\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`key\` varchar(50) NOT NULL, \`type\` enum ('requirement', 'task', 'bug') NOT NULL, \`title\` varchar(140) NOT NULL, \`description\` mediumtext NULL, \`state\` varchar(32) NOT NULL, \`priority\` varchar(16) NULL, \`severity\` varchar(16) NULL, \`assignee_id\` varchar(255) NULL, \`reporter_id\` varchar(255) NULL, \`story_points\` int NULL, \`estimate_minutes\` int NULL, \`remaining_minutes\` int NULL, \`estimated_hours\` decimal(5,1) NULL, \`actual_hours\` decimal(5,1) NULL, \`sprint_id\` varchar(255) NULL, \`release_id\` varchar(255) NULL, \`parent_id\` varchar(255) NULL, \`labels\` json NULL, \`due_at\` timestamp(6) NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \`deleted\` tinyint NOT NULL DEFAULT 0, UNIQUE INDEX \`IDX_e9327fca89626d460579131fcd\` (\`project_id\`, \`key\`), INDEX \`IDX_589d3a451be4f327e110c6cd46\` (\`project_id\`, \`state\`, \`assignee_id\`, \`updatedAt\`), UNIQUE INDEX \`IDX_f1b4b8a3c04159d1e185de2b52\` (\`key\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`attachments\` (\`id\` varchar(36) NOT NULL, \`issue_id\` varchar(255) NOT NULL, \`object_key\` varchar(255) NOT NULL, \`file_name\` varchar(255) NOT NULL, \`size\` int NOT NULL, \`content_type\` varchar(128) NOT NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_ebd5eb09e0d62f46c41c435133\` (\`issue_id\`, \`createdAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`comments\` (\`id\` varchar(36) NOT NULL, \`issue_id\` varchar(255) NOT NULL, \`author_id\` varchar(255) NOT NULL, \`body\` mediumtext NOT NULL, \`mentions\` json NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updatedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_d3f0e4882cfe7aa42e7f2dc2da\` (\`issue_id\`, \`createdAt\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`releases\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(255) NOT NULL, \`tag\` varchar(255) NOT NULL, \`notes\` mediumtext NULL, \`released_at\` timestamp(6) NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_9c6307b3a3ec00b5c28f3d99b0\` (\`project_id\`, \`released_at\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`memberships\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`user_id\` varchar(255) NOT NULL, \`role\` varchar(32) NOT NULL, \`joinedAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), UNIQUE INDEX \`IDX_246faae84ffe34c04db7c91ae5\` (\`project_id\`, \`user_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`board_columns\` (\`id\` varchar(36) NOT NULL, \`board_id\` varchar(255) NOT NULL, \`name\` varchar(100) NOT NULL, \`description\` text NULL, \`wip_limit\` int NULL, \`sort_order\` int NOT NULL DEFAULT '0', \`state_mapping\` varchar(128) NOT NULL, \`color\` varchar(16) NOT NULL DEFAULT '#1890ff', \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_55e6772f5b84a2fb358db47331\` (\`board_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`boards\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(100) NOT NULL, \`description\` text NULL, \`is_default\` tinyint NOT NULL DEFAULT 0, \`created_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \`updated_at\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), INDEX \`IDX_1542ae826c0dfeaf4c79e07fc5\` (\`project_id\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`sprints\` (\`id\` varchar(36) NOT NULL, \`project_id\` varchar(255) NOT NULL, \`name\` varchar(255) NOT NULL, \`start_at\` timestamp(6) NULL, \`end_at\` timestamp(6) NULL, \`goal\` varchar(255) NULL, \`capacity\` int NULL, \`createdAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), INDEX \`IDX_3be27b547b3f5f2536f1b5822a\` (\`project_id\`, \`start_at\`, \`end_at\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`ALTER TABLE \`gitlab_sync_status\` ADD CONSTRAINT \`FK_23a3e650acce1182e043a2f2aff\` FOREIGN KEY (\`mappingId\`) REFERENCES \`gitlab_project_mappings\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` ADD CONSTRAINT \`FK_fbd7d315aded189ab18674e450f\` FOREIGN KEY (\`projectId\`) REFERENCES \`projects\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` ADD CONSTRAINT \`FK_c4f90effb9651b6accda8499942\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_event_logs\` ADD CONSTRAINT \`FK_b660fa48c9253cdc511d6a818d5\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` ADD CONSTRAINT \`FK_7f146ebc41419786bbe732aa1a4\` FOREIGN KEY (\`userId\`) REFERENCES \`users\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` ADD CONSTRAINT \`FK_f3f8ffd307b1c09d2fdf0106c4e\` FOREIGN KEY (\`gitlabInstanceId\`) REFERENCES \`gitlab_instances\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`memberships\` ADD CONSTRAINT \`FK_7c1e2fdfed4f6838e0c05ae5051\` FOREIGN KEY (\`user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`board_columns\` ADD CONSTRAINT \`FK_55e6772f5b84a2fb358db473313\` FOREIGN KEY (\`board_id\`) REFERENCES \`boards\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE \`board_columns\` DROP FOREIGN KEY \`FK_55e6772f5b84a2fb358db473313\``);
        await queryRunner.query(`ALTER TABLE \`memberships\` DROP FOREIGN KEY \`FK_7c1e2fdfed4f6838e0c05ae5051\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` DROP FOREIGN KEY \`FK_f3f8ffd307b1c09d2fdf0106c4e\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_user_mappings\` DROP FOREIGN KEY \`FK_7f146ebc41419786bbe732aa1a4\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_event_logs\` DROP FOREIGN KEY \`FK_b660fa48c9253cdc511d6a818d5\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` DROP FOREIGN KEY \`FK_c4f90effb9651b6accda8499942\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_project_mappings\` DROP FOREIGN KEY \`FK_fbd7d315aded189ab18674e450f\``);
        await queryRunner.query(`ALTER TABLE \`gitlab_sync_status\` DROP FOREIGN KEY \`FK_23a3e650acce1182e043a2f2aff\``);
        await queryRunner.query(`DROP INDEX \`IDX_3be27b547b3f5f2536f1b5822a\` ON \`sprints\``);
        await queryRunner.query(`DROP TABLE \`sprints\``);
        await queryRunner.query(`DROP INDEX \`IDX_1542ae826c0dfeaf4c79e07fc5\` ON \`boards\``);
        await queryRunner.query(`DROP TABLE \`boards\``);
        await queryRunner.query(`DROP INDEX \`IDX_55e6772f5b84a2fb358db47331\` ON \`board_columns\``);
        await queryRunner.query(`DROP TABLE \`board_columns\``);
        await queryRunner.query(`DROP INDEX \`IDX_246faae84ffe34c04db7c91ae5\` ON \`memberships\``);
        await queryRunner.query(`DROP TABLE \`memberships\``);
        await queryRunner.query(`DROP INDEX \`IDX_9c6307b3a3ec00b5c28f3d99b0\` ON \`releases\``);
        await queryRunner.query(`DROP TABLE \`releases\``);
        await queryRunner.query(`DROP INDEX \`IDX_d3f0e4882cfe7aa42e7f2dc2da\` ON \`comments\``);
        await queryRunner.query(`DROP TABLE \`comments\``);
        await queryRunner.query(`DROP INDEX \`IDX_ebd5eb09e0d62f46c41c435133\` ON \`attachments\``);
        await queryRunner.query(`DROP TABLE \`attachments\``);
        await queryRunner.query(`DROP INDEX \`IDX_f1b4b8a3c04159d1e185de2b52\` ON \`issues\``);
        await queryRunner.query(`DROP INDEX \`IDX_589d3a451be4f327e110c6cd46\` ON \`issues\``);
        await queryRunner.query(`DROP INDEX \`IDX_e9327fca89626d460579131fcd\` ON \`issues\``);
        await queryRunner.query(`DROP TABLE \`issues\``);
        await queryRunner.query(`DROP INDEX \`IDX_5bd40886be5eb2d7d615854172\` ON \`project_issue_states\``);
        await queryRunner.query(`DROP TABLE \`project_issue_states\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_active\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_type\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_instances_created_at\` ON \`gitlab_instances\``);
        await queryRunner.query(`DROP TABLE \`gitlab_instances\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_instance\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_user_mappings_gitlab_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_user_mapping\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_gitlab_user\` ON \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_user_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_instance\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_type\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_processed\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_created_at\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_events_retry\` ON \`gitlab_event_logs\``);
        await queryRunner.query(`DROP TABLE \`gitlab_event_logs\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_project\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_instance\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_gitlab_project\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`idx_gitlab_mappings_active\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`unique_mapping\` ON \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP TABLE \`gitlab_project_mappings\``);
        await queryRunner.query(`DROP INDEX \`REL_23a3e650acce1182e043a2f2af\` ON \`gitlab_sync_status\``);
        await queryRunner.query(`DROP TABLE \`gitlab_sync_status\``);
        await queryRunner.query(`DROP INDEX \`IDX_97672ac88f789774dd47f7c8be\` ON \`users\``);
        await queryRunner.query(`DROP TABLE \`users\``);
        await queryRunner.query(`DROP INDEX \`IDX_63e67599567b2126cfef14e147\` ON \`projects\``);
        await queryRunner.query(`DROP TABLE \`projects\``);
    }

}
